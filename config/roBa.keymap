#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define JP_DQUOTE AT                // "

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mt_z: mt_z {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_Z";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "balanced";
        };

        lt_1: lt_1 {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_1";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            flavor = "balanced";
        };

        TapDance_q: TapDance_q {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_Q";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp GRAVE>;

            tapping-term-ms = <300>;
        };

        TapDance_p: TapDance_p {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_P";
            #binding-cells = <0>;
            bindings = <&kp P>, <&kp MINUS>;

            tapping-term-ms = <300>;
        };

        TapDance_a: TapDance_a {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_A";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp TAB>;

            tapping-term-ms = <300>;
        };

        TapDance_k: TapDance_k {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_K";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp UP_ARROW>;

            tapping-term-ms = <300>;
        };

        TapDance_m: TapDance_m {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_M";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp LEFT>;

            tapping-term-ms = <300>;
        };

        TapDance_comma: TapDance_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_COMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp DOWN_ARROW>;

            tapping-term-ms = <300>;
        };

        TapDance_dot: TapDance_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_DOT";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp RIGHT_ARROW>;

            tapping-term-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&TapDance_q     &kp W         &kp E         &kp R              &kp T                              &kp Y      &kp U        &kp I            &kp O          &TapDance_p
&kp TAB         &kp A         &kp S         &kp D              &kp F        &kp G      &kp MINUS  &kp H      &kp J        &TapDance_k      &kp L          &kp SEMICOLON
&kp LEFT_SHIFT  &kp Z         &kp X         &kp C              &kp V        &kp B      &trans     &kp N      &TapDance_m  &TapDance_comma  &TapDance_dot  &kp SLASH
&kp LCTRL       &kp LEFT_WIN  &kp LEFT_ALT  &lt_1 1 BACKSPACE  &lt 2 SPACE  &mo 3      &trans     &kp ENTER                                               &mo 6
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUM {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp N7  &kp N8  &kp N9  &kp PLUS      &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp N4  &kp N5  &kp N6  &kp ASTERISK  &kp SLASH
&trans  &trans  &trans  &trans  &trans  &trans      &kp N0  &kp N1  &kp N2  &kp N3  &kp EQUAL     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5                       &kp LBKT   &kp RIGHT_BRACKET  &kp LESS_THAN         &kp GREATER_THAN  &trans
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans      &trans  &kp TILDE  &kp AT_SIGN        &kp MINUS             &kp UNDERSCORE    &trans
&kp F11  &kp F12  &trans  &trans  &trans   &trans      &trans  &kp CARET  &kp GRAVE          &kp NON_US_BACKSLASH  &kp PIPE          &trans
&trans   &trans   &trans  &trans  &trans   &trans      &trans  &trans                                                                &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp TAB         &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &kp AT  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans     &trans  &trans  &trans         &trans                        &trans  &trans    &trans    &trans    &trans
&trans     &trans  &trans  &mkp MB2       &mkp MB1  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans     &trans  &trans  &mkp MB4       &mkp MB5  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&kp LCTRL  &trans  &trans  &kp BACKSPACE  &mo 5     &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans     &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4                                 &bt BT_NXT  &bt BT_PRV  &bt BT_CLR  &bt BT_CLR_ALL  &trans
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &sys_reset       &sys_reset   &trans      &trans      &trans      &trans          &trans
&trans         &trans         &trans         &trans         &trans         &bootloader      &bootloader  &trans      &trans      &trans      &trans          &bt BT_CLR
&trans         &trans         &trans         &trans         &trans         &trans           &trans       &trans                                              &to 0
            >;
        };
    };
};
